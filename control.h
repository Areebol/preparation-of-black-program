//file: control.h

#ifndef CONTROL_H
#define CONTROL_H

#include"buff.h"
#include"debuff.h"
#include"character.h"
#include<string>
#include<conio.h>
#include<iostream>
#include<stdexcept>
#include<Windows.h>
#include<vector>

class debuff_base;
class buff_base;
class teleportationArray;
class stunMushrooms;
class pandoraBox;
class sphinxAsk;
class buff_base;
class torch;
class crystalBall;
class shovel;
class moderator;
class holyLight;
using std::string;
using std::vector;
class control
{
	//设置以下类为友元 用以改变地图 角色 或迷雾数据
	friend class debuff_base;
	friend class teleportationArray;
	friend class stunMushrooms;
	friend class pandoraBox;
	friend class sphinxAsk;
	friend class buff_base;
	friend class torch;
	friend class crystalBall;
	friend class shovel;
	friend class moderator;
	friend class holyLight;
private:
	//存放地图的二维数组 对应 y轴 x轴
	bool map[30][30];
	//存放迷雾的二维数组 真代表有迷雾 不可视 对应 y轴 x轴
	bool foggy[30][30];
	//存放屏幕数据的数组 对应 y轴 x轴
	char screen_data[36][96];
	character player;//游戏中的人物角色
	COORD end;//存放终点位置 按照 30*30 范围 0-29
	COORD player_coord;//存放人物坐标 按照 30*30 范围 0-29
	short player_vision_l;//设置人物视野的大小 实际设置为2*l+1的平方大小
	bool bufferSwapFlag;//判断缓冲区切换的标志
	bool fog_level;//迷雾的等级 等级从0到1 初始0级白色迷雾 最高1级红色迷雾
	bool loseFlag;//游戏失败标志
	bool winFlag;//判断游戏胜利标志
	vector<debuff_base*>debuff_vector;//地图上存放debuff的表
	vector<buff_base*>buff_vector;//地图上存放buff的表
	vector<buff_base*>buff_bag;//背包中存放buff的表
	//不可改变量------------------------------------------------------------------------------------------
	//关于界面的量
	const int interface_height = 36;//界面的高度
	const int interface_width = 96;//界面的宽度
	const int map_height = 30;//地图的高度
	const int map_width = 60;//地图的宽度
	const int tooltip_height = 30;//提示栏的高度
	const int tooltip_width = 30;//提示栏的宽度
	HANDLE hOutput;//缓冲区1
	HANDLE hOutBuf;//缓冲区2
	DWORD bytes = 0;//用于调用缓冲区函数需要的参数
public:
	//构造函数 初始化所有信息---------------------------------------------------------------------------------
	control();

	//整个游戏操作函数 game_--------------------------------------------------------------------------------------------------------------------
	//1 主体函数 进行所有的游戏操作
	void game();
private:
	//2 开始菜单选择操作函数 
	void game_start();
	//3 选择菜单操作函数
	void game_select();
	//4 选择地图菜单操作函数
	void game_select_map();
	//5 选择视野菜单操作函数
	void game_select_vision();
	//6 游戏主体部分控制操作函数
	void game_control();
	//7 游戏暂停操作函数
	void game_pause();
	//8 游戏胜利操作函数
	void game_win();
	//9 游戏失败操作函数
	void game_lose();
	//10 游戏打开背包操作函数
	void game_bag();

	//初始化函数 reset_---------------------------------------------------------------------------------------
	//1 初始化屏幕数组信息 清空屏幕数组信息为空
	void reset_screen_data();
	//2 初始化迷雾数组信息 
	//清空迷雾数组全部设置为真 全图都为迷雾
	void reset_foggy_data();
	//3 初始化地图信息 全地图为空
	void reset_map();
	//4 初始化缓冲区的文本属性 全部重设置为黑底白字
	void reset_buffer();
	//5 初始化缓冲区信息 对整个缓冲区屏幕清空包括文本内容文本属性
	void reset_screen();
	//6 更新人物坐标位置 根据人物现在的坐标更新人物坐标位置player_coord
	void reset_player_coord();
	//7 更新游戏是否结束 
	void reset_game_over_flag();
	//8 更新游戏的开始变量 在游戏开始对游戏数据 地图 人物 终点 迷雾 debuff buff 以及bag的数据设置 但不会改变人物的视野大小
	void reset_game_start();
	//9 更新游戏的屏幕数据 对一次操作之后 游戏所有数据的更新 并且输出到屏幕上
	void reset_game_screen();
	//10 刷新游戏的屏幕数据不输出 对一次操作之后 游戏所有数据更新 输出到屏幕上 不包括血量的减少
	void reset_game_screen_unshow();


	//打印数据到屏幕的函数 show_------------------------------------------------------------------------------
	//1 打印缓冲区信息到屏幕的函数
	void show_doublebuffer();


	//写入数据到缓冲区之中的函数 ouput_buffer_----------------------------------------------------------------
	//1 逐个单元格 写入颜色 以及字符
	void output_buffer(short x, short y, WORD color, char ch);



	//设置类内数据的函数 set_---------------------------------------------------------------------------------
	//1 设置地图信息
	//传入一个bool数组设置地图信息 拷贝地图
	void set_map(bool rhs[30][30]);
	//2 设置迷雾信息
	//将对应的 x y 坐标的迷雾设置为对应的值
	void set_foggy(int x, int y, bool sign);
	//3 设置终点位置
	//按照30*30 范围从0―29 
	//传入一个坐标将终点设置
	//提供边界检查
	void set_end(int x, int  y);
	//4 设置游戏玩家视野大小
	//x需要是奇数 大于0
	//传入的是 x 将视野设置为x*x的大小
	void set_player_vision(int x);
	//5 设置游戏玩家的位置
	//同时更新玩家位置
	//按照地图30*30 
	//玩家位置 范围 0-29
	//提供边界检查
	void set_player_coord(int x, int y);
	//6 设置迷雾的等级
	//level true 设置为红色迷雾
	//level false 设置为白色迷雾
	void set_foggy_level(bool level);
	//7 设置游戏为等级一
	void set_game_level_1();
	//8 设置游戏为等级二
	void set_game_level_2();
	//9设置游戏为等级三
	void set_game_level_3();
	//10 设置地图x y坐标位置的数据为 sign
	void set_map_dot(int x, int y, bool sign);



	//写入数据到屏幕数据的函数 write_--------------------------------------------------------------------------
	//1 绘制句子到旁栏 指定在第line行 指定sentence 指定color
	void write_tip_sentence(int line, string sentence, WORD color);
	//2 绘制地图 根据地图数据绘制地图在屏幕上 会覆盖地图区域上所有的显示
	void write_map();
	//3 将提示栏的清空 将提示栏区域的所有内容清空
	void write_tip_clear();
	//4 绘制无背景的开始 菜单栏函数 在提示栏
	void write_menu_start();
	//5 绘制无背景的选择游戏 难度 菜单栏函数 在提示栏
	void write_menu_select();
	//6 绘制无背景的选择游戏 难度 菜单栏函数 在提示栏
	void write_menu_select_level();
	//7 绘制无背景的选择游戏 选择视野 菜单栏函数 在提示栏
	void write_menu_select_vision();
	//8 绘制游戏进行的提示 菜单栏函数 在提示栏
	void write_menu_guide();
	//9 绘制迷雾 根据迷雾信息覆盖地图区域的内容
	void write_foggy();
	//10 绘制暂停菜单 在提示栏
	void write_menu_pause();
	//11 绘制玩家 根据玩家坐标位置绘制玩家图像
	void write_player();
	//12 绘制游戏胜利菜单  在提示栏
	void write_menu_win();
	//13 绘制终点坐标位置 根据终点位置绘制终点图像
	void write_end();
	//14 绘制界面边框函数
	void write_interface();
	//15 在地图区域输出文本内容 指定在第line行 句子为sentence 颜色为color
	void write_map_sentence(int line, string sentence, WORD color);
	//16 清空地图区域的文本内容 将地图区域所有内容清空
	void write_map_clear();
	//17 在地图区域输出游戏的游戏开始选择菜单的时候的 提示文本内容 在地图区域 
	void write_map_guide();
	//18 绘制玩家血条 根据血条数据在界面区域绘制血条长度
	void write_player_blood();
	//19 绘制游戏失败菜单 在提示栏
	void write_menu_lose();
	//20 绘制游戏失败菜单 在提示栏
	void write_map_dead();
	//21 在提示栏绘制背包面板选择菜单 在提示栏
	void write_menu_bag();

	//播放动画的函数 play_----------------------------------------------------------------------------------
	//1 播放开始动画函数
	void play_start();
	//2 播放结束动画函数
	void play_end();


	//人物的操作函数 player_------------------------------------------------------------------------------
	//1 移动类函数 上下左右
	//以下函数提供边界检查 
	//如果有墙无法移动
	void player_move_up();
	void player_move_down();
	void player_move_right();
	void player_move_left();
	//2 人物照亮迷雾的函数
	void player_light_foggy();


	//对迷雾的操作函数 foggy_----------------------------------------------------------------------------
	//1 对迷雾部分显示用于展示视野大小
	//用于在选择vision的时候展示视野的大小 
	//在地图区域的中心位置展示
	void foggy_light_for_show_center(int i);
	//2 照亮终点(2*i+1)平方的区域
	//以终点为中心照亮终点的部分视野
	void foggy_light_end(int i);
	//3 照亮周围宽度为i的区域
	//照亮地图区域四周为界的 宽度为i的区域 
	//总共是四条区域
	void foggy_light_around(int i);
	//存放的地图数据------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//地图1 设置关卡1
	bool map1[30][30] =
	{
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,
1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,
1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,
1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,
1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,
1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,
1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,
1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,
1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,
1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,
1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,
1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,
1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,
1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,
1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,
1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,
1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,
1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,
1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,
1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,
1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,
1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,
1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,
1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,
1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,
1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,
1,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0 };
	//地图2 //设置关卡2
	bool map2[30][30] =
	{
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,
1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,
1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,
1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,
1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,
1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,
1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,
1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,
1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,1,
1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,
1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,
1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,
1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,
1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,
1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,
1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,
1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,
1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,0,
1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,
1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,
1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,
1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,
1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,
1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,
1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0 };
	//地图3 设置关卡3
	bool map3[30][30] =
	{
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,
1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,
1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,
1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,
1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,
1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,
1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,
1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,
1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,
1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,
1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,
1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,
1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,
1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,
1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,
1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,
1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,
1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,
1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,
1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,
1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,
1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,
1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,
1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0 };
};

#endif